<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://cxf.apache.org/jaxws
                        http://cxf.apache.org/schemas/jaxws.xsd
                        http://cxf.apache.org/transports/http/configuration
                        http://cxf.apache.org/schemas/configuration/http-conf.xsd
                         http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	default-autowire="byName" default-lazy-init="true">
	
	<import resource="classpath*:META-INF/spring/persistence.xml" />
	
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource"
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="useCodeAsDefaultMessage" value="false" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="cacheSeconds" value="60" />
    </bean>
    
    <bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到使用classpath下的 ValidationMessages.properties -->
		 <property name="validationMessageSource" ref="messageSource" />
	</bean>


	<bean id="receiptService"
		class="com.netfinworks.site.ext.service.facade.impl.ReceiptServiceImpl">
		<property name="fundoutProducts">  
	        <map>
		         <entry key="10210" value="普通提现（T+N）"></entry>
		         <entry key="10211" value="快速提现（实时）"></entry>
		         <entry key="10220" value="付款到卡（T+N）"></entry>
		         <entry key="10221" value="付款到卡（实时）"></entry>
		         <entry key="10230" value="代发工资到卡（T+N）"></entry>
		         <entry key="10231" value="代发工资到账户"></entry>
	        </map>  
	      </property> 
	      <property name="tradeProducts">  
	        <map>
		        <entry key="20201" value="即时到帐交易"></entry>
		        <entry key="20202" value="担保交易"></entry>  
	        </map>  
	      </property>
	</bean>
	
	<bean id="auditServiceImpl" class="com.netfinworks.site.ext.service.facade.impl.AuditServiceImpl">
     	<property name="auditDAO" ref="auditDAO"></property>
    </bean>
    
    <bean id ="autoFundoutServiceImpl" class="com.netfinworks.site.ext.service.facade.impl.AutoFundoutServiceImpl">
    	<property name="autoFundoutOrderDAO" ref="autoFundoutOrderDAO"></property>
	</bean>

	<!-- 微信消息接口 -->
	<bean id ="sendTemplateMessageImpl" class="com.netfinworks.site.ext.service.facade.impl.SendTemplateMessageImpl"/>
	<bean id="xuCache" class="com.netfinworks.basis.inf.ucs.memcached.XUCache" init-method="init" >
		<property name="name" value="${memcached.name}" />
		<property name="namingService" ref="tTNamingService" />
 	</bean>
 
 	<bean id="tTNamingService" class="com.netfinworks.basis.inf.ucs.memcached.ns.TTNamingService">
		<property name="ttServerAddress" value="${memcached.ttServerAddress}" />
 	</bean> 
	<!-- <jaxws:client id="uesRemoteService"
		serviceClass="com.netfinworks.ues.services.UesRemoteService" address="${ues.uesRemoteService.address}/UesRemoteService" />
		

	<bean id="uesClient" class="com.netfinworks.ues.UesClient">
		<property name="uesRemoteService" ref="uesRemoteService" />
	</bean>
	
		账户信息
	<jaxws:client id="accountFacade" serviceClass="com.netfinworks.ma.service.facade.IAccountFacade" address="${ma-web.address}/AccountFacade" />
	
		商户信息
	<jaxws:client id="merchantFacade" serviceClass="com.netfinworks.ma.service.facade.IMerchantFacade" address="${ma-web.address}/MerchantFacade" /> -->

</beans>
